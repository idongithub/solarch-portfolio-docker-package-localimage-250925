#!/bin/bash

# Docker Build Script - Works without Yarn installed
# This handles the yarn.lock issue automatically

set -e

echo "🎯 Building IT Portfolio Docker Image (No Yarn Required)"
echo "======================================================"

# Ensure we're in the right directory
echo "📁 Current directory: $(pwd)"

# Double-check files exist
if [ ! -f "frontend/package.json" ]; then
    echo "❌ ERROR: frontend/package.json not found"
    exit 1
fi

echo "✅ frontend/package.json confirmed"

# Handle yarn.lock - create a minimal one or skip it
if [ ! -f "frontend/yarn.lock" ]; then
    echo "📦 yarn.lock missing - creating minimal yarn.lock..."
    
    # Create a basic yarn.lock file
    cat > frontend/yarn.lock << 'EOF'
# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 6
  cacheKey: 8
EOF
    
    echo "✅ Basic yarn.lock created"
else
    echo "✅ yarn.lock already exists"
fi

# Create Dockerfile that handles yarn.lock gracefully
echo "📄 Creating Docker file that works with or without yarn.lock..."
cat > Dockerfile.noyarn << 'EOF'
FROM node:18-alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Set working directory
WORKDIR /app

# Copy package.json first
COPY frontend/package.json ./package.json

# Copy yarn.lock if it exists, but don't fail if it doesn't
COPY frontend/yarn.loc[k] ./

# Install yarn and dependencies
RUN npm install -g yarn && \
    yarn install || npm install

# Copy all source files
COPY frontend/src ./src
COPY frontend/public ./public

# Copy any .env files (optional)
COPY frontend/.env* ./ 2>/dev/null || true

# Build the application
RUN yarn build || npm run build

# Install serve globally
RUN npm install -g serve

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start the application
CMD ["serve", "-s", "build", "-l", "3000"]
EOF

echo "✅ Dockerfile.noyarn created"

# Clean Docker cache
echo "🧹 Cleaning Docker cache..."
sudo docker system prune -f >/dev/null 2>&1 || true

# Show build context
echo "🔍 Build context verification:"
echo "   ✓ frontend/package.json: $(wc -c < frontend/package.json) bytes"
if [ -f "frontend/yarn.lock" ]; then
    echo "   ✓ frontend/yarn.lock: $(wc -c < frontend/yarn.lock) bytes"
else
    echo "   ⚠ frontend/yarn.lock: not found (will be created during build)"
fi
echo "   ✓ frontend/src/: $(find frontend/src -type f | wc -l) files"
echo "   ✓ frontend/public/: $(find frontend/public -type f | wc -l) files"

echo ""
echo "🔨 Starting Docker build (this may take 5-7 minutes)..."
echo ""

# Build the Docker image
if sudo docker build -f Dockerfile.noyarn -t kamal-portfolio . --no-cache; then
    echo ""
    echo "🎉🎉🎉 BUILD SUCCESSFUL! 🎉🎉🎉"
    echo ""
    echo "✅ Your IT Portfolio Docker image is ready!"
    echo ""
    echo "🚀 To deploy your portfolio:"
    echo "   sudo docker run -d -p 80:3000 --name my-portfolio kamal-portfolio"
    echo ""
    echo "🌐 Then visit: http://localhost"
    echo ""
    echo "📊 Your professional IT Portfolio includes:"
    echo "   ✓ ARCHSOL IT Solutions branding"
    echo "   ✓ IT Portfolio Architect positioning"
    echo "   ✓ Gen AI and Agentic AI skills"
    echo "   ✓ Professional IT imagery"
    echo "   ✓ Complete navigation"
    echo "   ✓ Responsive design"
    echo ""
    echo "🔧 Container commands:"
    echo "   View:   sudo docker ps"
    echo "   Logs:   sudo docker logs my-portfolio"
    echo "   Stop:   sudo docker stop my-portfolio"
    echo "   Start:  sudo docker start my-portfolio"
    echo "   Remove: sudo docker rm -f my-portfolio"
    echo ""
    echo "🎯 DEPLOYMENT READY!"
    
else
    echo ""
    echo "❌ Build failed - let's debug"
    echo ""
    echo "🔍 Quick debug steps:"
    echo "1. Check Docker version: sudo docker --version"
    echo "2. Verify location: pwd"
    echo "3. Check file: ls -la frontend/package.json"
    echo "4. Try with verbose: sudo docker build -f Dockerfile.noyarn -t kamal-portfolio . --progress=plain"
    echo ""
    exit 1
fi