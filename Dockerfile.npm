# Optimized Frontend HTTP Dockerfile - Clean final image
FROM node:18-alpine as build-stage

# Set working directory
WORKDIR /app/frontend

# Copy package files first for better caching
COPY frontend/package.json frontend/package-lock.json ./

# Install dependencies and clean up in same layer
RUN npm install --legacy-peer-deps --frozen-lockfile && \
    npm audit fix --audit-level moderate || true && \
    npm cache clean --force

# Copy source code
COPY frontend/ .

# Build the application and clean up
RUN npm run build && \
    rm -rf node_modules && \
    rm -rf src && \
    rm -rf public && \
    rm -f package*.json

# Production stage with minimal nginx
FROM nginx:alpine

# Install only essential tools for health checks
RUN apk add --no-cache wget && \
    rm -rf /var/cache/apk/*

# Copy built files
COPY --from=build-stage /app/frontend/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx-simple.conf /etc/nginx/conf.d/default.conf

# Remove default nginx config and clean up
RUN rm -f /etc/nginx/conf.d/default.conf.bak && \
    rm -rf /var/cache/nginx

# Create non-root user for security
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chmod -R 755 /usr/share/nginx/html

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80/health || exit 1

USER nginx
CMD ["nginx", "-g", "daemon off;"]