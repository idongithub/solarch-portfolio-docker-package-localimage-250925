# Minimal test Dockerfile to isolate the nginx issue
FROM node:18-alpine as build-stage

# Set working directory for frontend
WORKDIR /app/frontend

# Copy package files for dependency installation
COPY frontend/package.json frontend/package-lock.json ./

# Install dependencies using npm with legacy peer deps to resolve conflicts
RUN npm install --legacy-peer-deps --frozen-lockfile

# Fix security vulnerabilities without breaking changes
RUN npm audit fix --audit-level moderate || true

# Copy frontend source code
COPY frontend/ .

# Build the React application
RUN npm run build

# Stage 2: Production runtime with minimal Nginx
FROM nginx:alpine

# Copy built React files to nginx serve directory
COPY --from=build-stage /app/frontend/build /usr/share/nginx/html

# Create a simple error page
RUN echo '<!DOCTYPE html><html><head><title>Server Error</title></head><body><h1>Server Error</h1><p>The server encountered an error.</p></body></html>' > /usr/share/nginx/html/50x.html

# Copy minimal nginx configuration
COPY nginx-minimal.conf /etc/nginx/conf.d/default.conf

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]