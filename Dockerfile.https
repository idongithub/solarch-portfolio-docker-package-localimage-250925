# HTTPS-enabled Dockerfile for Kamal Singh Portfolio
FROM node:18-alpine as build-stage

# Set working directory for frontend
WORKDIR /app/frontend

# Copy package files for dependency installation
COPY frontend/package.json frontend/package-lock.json ./

# Install dependencies using npm with legacy peer deps to resolve conflicts
RUN npm install --legacy-peer-deps --frozen-lockfile

# Fix security vulnerabilities without breaking changes
RUN npm audit fix --audit-level moderate || true

# Copy frontend source code
COPY frontend/ .

# Build the React application
RUN npm run build

# Stage 2: Production runtime with HTTPS support
FROM nginx:alpine

# Install OpenSSL for certificate generation
RUN apk add --no-cache openssl

# Copy built React files to nginx serve directory
COPY --from=build-stage /app/frontend/build /usr/share/nginx/html

# Create SSL directory
RUN mkdir -p /etc/nginx/ssl

# Copy HTTPS nginx configuration
COPY nginx-https.conf /etc/nginx/conf.d/default.conf

# Generate self-signed certificate for development/testing
# In production, mount real certificates as volumes
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/nginx/ssl/portfolio.key \
    -out /etc/nginx/ssl/portfolio.crt \
    -subj "/C=UK/ST=London/L=London/O=ARCHSOL IT Solutions/CN=localhost"

# Set proper permissions for SSL certificates
RUN chmod 600 /etc/nginx/ssl/portfolio.key
RUN chmod 644 /etc/nginx/ssl/portfolio.crt

# Expose both HTTP and HTTPS ports
EXPOSE 80 443

# Health check (use HTTPS)
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-check-certificate --no-verbose --tries=1 --spider https://localhost:443/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]