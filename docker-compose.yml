# Docker Compose for Kamal Singh Portfolio
# Production-ready multi-container setup

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: portfolio_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-portfolio_admin_2024}
      MONGO_INITDB_DATABASE: ${DB_NAME:-portfolio_db}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init_database.js:/docker-entrypoint-initdb.d/init_database.js:ro
    networks:
      - portfolio_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio_backend
    restart: unless-stopped
    environment:
      # Database Configuration
      MONGO_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-portfolio_admin_2024}@mongodb:27017/${DB_NAME:-portfolio_db}?authSource=admin
      DB_NAME: ${DB_NAME:-portfolio_db}
      
      # Server Configuration
      HOST: 0.0.0.0
      PORT: 8001
      ENVIRONMENT: production
      DEBUG: "False"
      
      # Email Configuration
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
      FROM_EMAIL: ${FROM_EMAIL:-${SMTP_USERNAME}}
      TO_EMAIL: ${TO_EMAIL:-kamal.singh@architecturesolutions.co.uk}
      
      # Rate Limiting
      EMAIL_RATE_LIMIT_WINDOW: ${EMAIL_RATE_LIMIT_WINDOW:-3600}
      EMAIL_RATE_LIMIT_MAX: ${EMAIL_RATE_LIMIT_MAX:-10}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-kamal-singh-portfolio-secret-key-production-2024}
      ADMIN_TOKEN: ${ADMIN_TOKEN:-admin_secret_token_2024}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      
      # Other
      WEBSITE_URL: ${WEBSITE_URL:-http://localhost:3000}
      
    ports:
      - "${BACKEND_PORT:-8001}:8001"
    volumes:
      - backend_logs:/app/logs
    networks:
      - portfolio_network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL:-http://localhost:8001}
    container_name: portfolio_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - portfolio_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: portfolio_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # For SSL certificates
      - nginx_logs:/var/log/nginx
    networks:
      - portfolio_network
    depends_on:
      - frontend
      - backend
    profiles:
      - production  # Only start with --profile production

# Docker Volumes for Persistent Data
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

# Docker Networks
networks:
  portfolio_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16